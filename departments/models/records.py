from extensions import db  # Use absolute import for db
from datetime import date, datetime


class Patient(db.Model):
    """Represents a patient."""
    __tablename__ = 'patients'

    id = db.Column(db.Integer, primary_key=True)  # Internal database ID
    patient_id = db.Column(db.String(10), unique=True, nullable=False)  # Autogenerated unique patient number
    name = db.Column(db.String(100), nullable=False)
    place_of_residence = db.Column(db.String(100), nullable=False)
    sex = db.Column(db.String(10), nullable=False)  # e.g., 'Male', 'Female', 'Other'
    date_of_birth = db.Column(db.Date, nullable=False)
    marital_status = db.Column(db.String(20), nullable=False)  # e.g., 'Single', 'Married'
    blood_group = db.Column(db.String(5), nullable=False)  # e.g., 'A+', 'O-'
    contact = db.Column(db.String(15), nullable=False)  # Phone number
    next_of_kin = db.Column(db.String(100), nullable=False)
    relationship_with_next_of_kin = db.Column(db.String(50), nullable=False)
    next_of_kin_contact = db.Column(db.String(15), nullable=False)  # Next of kin's phone number
    national_id = db.Column(db.String(50), unique=True, nullable=False)  # National ID
    emergency_contact = db.Column(db.String(15), nullable=False)  # Emergency contact number
    date_registered = db.Column(db.DateTime, default=db.func.current_timestamp(), nullable=False)

    def generate_patient_id(self):
        """Generate a unique patient ID."""
        prefix = "P"
        last_patient = Patient.query.order_by(Patient.id.desc()).first()
        if last_patient:
            last_number = int(last_patient.patient_id[1:]) if last_patient.patient_id.startswith(prefix) else 0
        else:
            last_number = 0
        new_number = last_number + 1
        return f"{prefix}{new_number:04d}"  # Format as P0001, P0002, etc.
    
class PatientWaitingList(db.Model):
    """Represents a waiting list for patients."""
    __tablename__ = 'patient_waiting_list'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)  # Primary key with autoincrement
    patient_id = db.Column(db.String(10), db.ForeignKey('patients.patient_id'), nullable=False)  # Foreign key to Patient
    seen = db.Column(db.Integer, default=0, nullable=False)  # Whether the patient has been seen (0 = No, 1 = Yes)

    # Define a relationship with Patient
    patient = db.relationship("Patient", backref="waiting_list", lazy="joined")

    def __repr__(self):
        return f"<PatientWaitingList Patient ID: {self.patient_id}, Seen: {self.seen}>"



class Clinic(db.Model):
    """Represents a clinic."""
    __tablename__ = 'clinics'

    clinic_id = db.Column(db.Integer, primary_key=True)  # Primary key
    name = db.Column(db.String(100), nullable=False)  # Clinic name
    fee = db.Column(db.Float, nullable=False)  # Clinic fee

    def __repr__(self):
        return f"<Clinic {self.name}>"
    



class ClinicBooking(db.Model):
    """Represents a clinic booking with patient details and status."""
    __tablename__ = 'clinic_bookings'

    id = db.Column(db.Integer, primary_key=True)  # Primary key
    patient_id = db.Column(db.String(10), db.ForeignKey('patients.patient_id'), nullable=False)  # Foreign key to patients
    clinic_id = db.Column(db.Integer, db.ForeignKey('clinics.clinic_id'), nullable=False)  # Foreign key to clinics
    created_on = db.Column(db.Date, default=datetime.utcnow().date(), nullable=False)  # Booking creation date
    clinic_date = db.Column(db.Date, nullable=False)  # Date the patient is supposed to come
    seen = db.Column(db.Integer, default=0, nullable=False)  # Status: 0 = Not seen, 1 = Seen
    receipt_number = db.Column(db.String(255), nullable=True)  # Added for billing integration

    # Relationships
    patient = db.relationship('Patient', backref='bookings', lazy=True)  # Link to Patient
    clinic = db.relationship('Clinic', backref='bookings', lazy=True)   # Link to Clinic

    def __repr__(self):
        return f"<ClinicBooking {self.id}>"



    